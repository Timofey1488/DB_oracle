--Step 1--
CREATE TABLE MyTable (
    id  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,--auto-increment
    val INTEGER
);
DROP TABLE MyTable;

select * from MyTable;

--Step 2--
--Creating anonim block and fill in random values
DECLARE
    random_number NUMBER;
BEGIN
    FOR i IN 1..100
    LOOP
        random_number := dbms_random.value(1,10);
        INSERT INTO MyTable (val) VALUES (random_number);
    END LOOP;
END;

--Step 3--
--Function counter even and odd numbers
CREATE OR REPLACE FUNCTION counter_equals RETURN INTEGER IS
    even_counter INTEGER;
    odd_counter INTEGER;
BEGIN
    SELECT COUNT(*) INTO even_counter FROM MyTable WHERE MOD(val, 2) = 0;
    SELECT COUNT(*) INTO odd_counter FROM MyTable WHERE MOD(val, 2) <> 0;
    IF even_counter > odd_counter THEN
        dbms_output.put_line('TRUE');
    ELSIF even_counter < odd_counter THEN
        dbms_output.put_line('FALSE');
    ELSE
        dbms_output.put_line('EQUAL');
    END IF;
    RETURN even_counter;
END;

DECLARE
    call_func INTEGER;
BEGIN
    call_func := counter_equals();
END;

--Step 4--
--Generating string INSERT
CREATE OR REPLACE FUNCTION get_insert_str (id_ NUMBER) RETURN VARCHAR2
IS
  v_val  NUMBER;
  v_stm VARCHAR2(100);
BEGIN
  SELECT val INTO v_val FROM MyTable WHERE id = id_;
  v_stm := 'INSERT INTO MyTable (id, val) VALUES (' || id_ || ', ' || v_val || ');';
  DBMS_OUTPUT.PUT_LINE(v_stm);
  RETURN v_stm;
END;

DECLARE
    stm VARCHAR2(100);
BEGIN
    stm := get_insert_str(8);
END;

--Step 5--
CREATE OR REPLACE PROCEDURE ins(in_val IN NUMBER) AS
    BEGIN
        INSERT INTO MyTable
            (VAL)
        VALUES
            (in_val);
    end;

 CREATE OR REPLACE PROCEDURE del(ID_in IN NUMBER) AS
    BEGIN
        DELETE FROM MyTable
            WHERE ID = ID_in;
    end;

 CREATE OR REPLACE PROCEDURE upd(ID_in IN NUMBER, val_in IN NUMBER) AS
BEGIN
    UPDATE MyTable
    SET VAL = val_in
    WHERE ID = ID_in;
end;

--Step 6
CREATE OR REPLACE FUNCTION calc(
  month_salary NUMBER,
  bonus_rate NUMBER
) RETURN NUMBER
IS
  result_ NUMBER;
BEGIN
  IF month_salary <= 0 OR bonus_rate <= 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Wrong input');
  END IF;

  result_ := (1 + bonus_rate / 100) * 12 * month_salary;

  RETURN result_;
END;

DECLARE
    result_ NUMBER;
BEGIN
    result_ := calc(500, 100);
    dbms_output.put_line(result_);
END;
